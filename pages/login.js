import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useForm } from "react-hook-form";
import { makePostRequest } from "../helper/request-builder";
import routes from "../common/routes";
import { useEffect } from "react";

export default function Register() {

    useEffect(() => {
        if(localStorage.getItem("jwt")){
            window.location.href = routes.home;
        }
    },[])

    const {
      register,
      handleSubmit,
      formState: { errors },
    } = useForm();

    const onSubmit = async (data) => {
      const response = await makePostRequest("/login", data);
      localStorage.setItem("jwt", response);
      window.location.href = routes.login;
    };
  return (
    <div className={styles.container}>
      <Head>
        <title>Log in</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.register}>
        <div>
          <div>
            <form onSubmit={handleSubmit(onSubmit)}>
              <div className={styles.inputContainer}>
                <label>Username / Email</label>
                <input
                className={styles.input}
                  type={"text"}{...register("username", {
                  required: {
                    value: true,
                    message: "Username darf nicht leer sein!",
                  },
                  minLength: {
                    value: 3,
                    message:
                            "Username muss mindestens 3 Buchstaben lang sein!",
                  },
                })}
                />
                {errors.username && <p>{errors.username.message}</p>}
              </div>

              <hr></hr>

              <div className={styles.inputContainer}>
                <label>Passwort</label>
                <input
                className={styles.input}
                  type={"password"}{...register("password", {
                  required: {
                    value: true,
                    message: "Passwort darf nicht leer sein!",
                  },
                  minLength: {
                    value: 4,
                    message:
                            "Passwort muss mindestens 4 Buchstaben lang sein!",
                  },
                })}
                />
                {errors.password && <p>{errors.password.message}</p>}
              </div>

              <hr></hr>

              <button id="buttonRegister" type="submit">Log in</button>
            </form>
          </div>
        </div>
      </main>

    </div>
  );
}
